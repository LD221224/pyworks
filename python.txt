* 변수명
	띄어쓰기 X
	맨 앞에 숫자 X
	예약어 X
	'_'로 연결 ex) var_name

* 자료구조
	리스트 [ ]
	딕셔너리 {key : value}
	튜플 ( ) - 수정, 삭제 불가

* 집합 자료형 set
	중복 불가, 순서 없음
	set() 사용

* 함수
    함수 정의
        def 함수 이름:
            실행문
    함수 실행
        함수 이름()
    콜백 함수 - 재귀 함수

* 모듈 - 파이썬 파일(.py)
    변수, 함수, 클래스(객체)가 포함된 소스 파일
    외부에서 사용 가능 - import 모듈 이름

* 클래스 - 생성자(초기자), 멤버 변수, 함수(메서드)
    객체에 대한 속성과 기능을 코드로 구현
    클래스 정의
        class 클래스 이름:
            def __init__(self):
                self.멤버 변수(객체의 특성, 속성) = ""
            def 함수 이름(self):
                return
    파이썬 (self) 사용, 다른 언어 (this) 사용

* 멤버 변수 - day24/classlib/dog.py 참고
    클래스 변수
    인스턴스 변수

< 객체 지향 언어의 특성 >
1 캡슐화(추상화) - 멤버 변수, 메서드(함수)

2 정보 은닉
    멤버 변수 private (<-> public : 접근 가능)
        _멤버 변수, __멤버 변수
    get(), set() 함수

3 상속, 다형성

* 예외 처리(Exception)
    try:
        예외 발생 가능 코드
    except:
        예외 발생시 실행 코드

* 모듈 > 라이브러리
* 프레임 워크 - 모듈, 라이브러리가 이미 제공
    사용자 작업 도구

* 정규표현식(Regular Expression)
    import re - re.compile() 사용

-----------------------------------------------------------------------

* WAS(Web Application Server) : flask, django, spring
    flask 설치 - pip install flask
    Client -> 요청 request, 응답 response <- Web Server(WAS)

* Flask 웹 서버 가동 - day31/website/app.py 참고
    from  flask import Flask
    app = Flask(__name__)
    @app.route('/')  # (= 127.0.0.1:5000)
    def index():     # 제어(control) 함수
        return render_template('index.html')
    app.run

    templates -> html
    static -> css, javascript, images

* 템플릿 태그
    {% %} - if, for 문
            {% if 조건 %} ~ {% endif %}
            {% for 조건 %} ~ {% endfor %}
    {{ }} - 출력

* 웹 요청 방식
    get - 웹 페이지 오픈(연결) : 주소표시줄에 출력
    post - 데이터 전송(보안 처리) : 주소표시줄에 보이지 않음

* form - 유효성 검사
    정규표현식 - 글자수, 영문/숫자 포함, 공백 처리 등

* 클라이언트와 웹 서버(Flask, Django) 간의 상태 유지
    세션 session : 클라이언트 -> 웹 서버
    쿠키 cookie
        1 쿠키 생성 : 웹 서버 -> 클라이언트
        2 쿠키 저장
        3 쿠키 전송 : 클라이언트 -> 웹 서버

* 웹 스크래핑 = 웹 크롤링
    인터넷에 있는 웹 페이지를 방문해 자료를 수집하는 일